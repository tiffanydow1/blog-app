{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","pages/article-content.js","components/ArticlesList.js","pages/ArticlesListPage.js","components/CommentsList.js","components/UpvotesSection.js","components/AddCommentForm.js","pages/NotFoundPage.js","pages/ArticlePage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","AboutPage","articles","name","title","content","ArticlesList","map","article","key","to","substring","ArticlesListPage","articleContent","CommentsList","comments","comment","className","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentsForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","NotFoundPage","ArticlesPage","match","params","find","articleInfo","useEffect","console","log","fetchData","otherArticles","filter","paragraph","NavBar","App","path","component","exact","ArticlePage","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iQAwBeA,EAtBE,kBACb,kBAAC,WAAD,KACI,0DACA,obAQA,sbCWOC,EAtBG,kBACd,kBAAC,WAAD,KACI,wCACA,obAQA,sbCIOC,EAjBE,CACb,CACIC,KAAM,cACNC,MAAO,iCACPC,QAAS,CACL,sHAGR,CACIF,KAAM,aACNC,MAAO,gCACPC,QAAS,CACL,yECGGC,EAZM,SAAC,GAAD,IAAGJ,EAAH,EAAGA,SAAH,OACjB,kBAAC,WAAD,KACKA,EAASK,KAAI,SAACC,EAASC,GAAV,OACV,kBAAC,IAAD,CAAMA,IAAKA,EAAKC,GAAE,mBAAcF,EAAQL,OACpC,4BAAKK,EAAQJ,OACb,2BAAII,EAAQH,QAAQ,GAAGM,WAAWH,EAAS,KAA3C,aCGDI,EAPU,kBACrB,kBAAC,WAAD,KACI,6CACA,kBAAC,EAAD,CAAcV,SAAUW,M,+BCOjBC,EAZM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACjB,kBAAC,WAAD,KACI,yCACCA,EAASR,KAAI,SAACS,EAASP,GAAV,OACV,yBAAKQ,UAAU,UAAUR,IAAKA,GAC1B,4BAAKO,EAAQE,UACb,2BAAIF,EAAQG,YCabC,EAnBQ,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eAEtCC,EAAa,uCAAG,8BAAAC,EAAA,sEACIC,MAAM,iBAAD,OAAkBL,EAAlB,WAAwC,CAC/DM,OAAQ,SAFM,cACZC,EADY,gBAICA,EAAOC,OAJR,OAIZC,EAJY,OAKlBP,EAAeO,GALG,2CAAH,qDAQnB,OACI,yBAAKC,GAAG,mBACJ,4BAAQC,QAAS,kBAAMR,MAAvB,cACA,yDAA+BF,EAA/B,YCwBGW,EArCS,SAAC,GAAsC,IAApCZ,EAAmC,EAAnCA,YAAaE,EAAsB,EAAtBA,eAAsB,EAE1BW,mBAAS,IAFiB,mBAEnDhB,EAFmD,KAEzCiB,EAFyC,OAGpBD,mBAAS,IAHW,mBAGnDE,EAHmD,KAGtCC,EAHsC,KAKpDC,EAAU,uCAAG,8BAAAb,EAAA,sEACMC,MAAM,iBAAD,OAAkBL,EAAlB,gBAA6C,CACnEM,OAAQ,OACRG,KAAMS,KAAKC,UAAU,CAAEtB,WAAUC,KAAMiB,IACvCK,QAAS,CACL,eAAgB,sBALT,cACTb,EADS,gBAQIA,EAAOC,OARX,OAQTC,EARS,OASfP,EAAeO,GACfK,EAAY,IACZE,EAAe,IAXA,2CAAH,qDAchB,OACI,yBAAKN,GAAG,oBACJ,6CACA,uCAEI,2BAAOW,KAAK,OAAOC,MAAOzB,EAAU0B,SAAU,SAACC,GAAD,OAAWV,EAAYU,EAAMC,OAAOH,WAEtF,0CAEI,8BAAUI,KAAK,IAAIC,KAAK,KAAKL,MAAOP,EAAaQ,SAAU,SAACC,GAAD,OAAWR,EAAeQ,EAAMC,OAAOH,WAEtG,4BAAQX,QAAS,kBAAMM,MAAvB,iBC1BGW,EAJM,kBACjB,oDC6CWC,EAxCM,SAAC,GAAe,IAE3B/C,EAF0B,EAAZgD,MAEDC,OAAOjD,KACpBK,EAAUK,EAAewC,MAAK,SAAA7C,GAAO,OAAIA,EAAQL,OAASA,KAHhC,EAKM+B,mBAAS,CAAEZ,QAAS,EAAGP,SAAU,KALvC,mBAKzBuC,EALyB,KAKZ/B,EALY,KAiBhC,GAVAgC,qBAAU,YACS,uCAAG,8BAAA9B,EAAA,sEACOC,MAAM,iBAAD,OAAkBvB,IAD9B,cACRyB,EADQ,gBAEKA,EAAOC,OAFZ,OAERC,EAFQ,OAGd0B,QAAQC,IAAI3B,EAAM,QAClBP,EAAeO,GAJD,2CAAH,qDAMf4B,KACD,CAACvD,KAECK,EAAS,OAAO,kBAAC,EAAD,MAErB,IAAMmD,EAAgB9C,EAAe+C,QAAO,SAAApD,GAAO,OAAIA,EAAQL,OAASA,KAExE,OACI,kBAAC,WAAD,KACI,4BAAKK,EAAQJ,OACb,kBAAC,EAAD,CACIiB,YAAalB,EACbmB,QAASgC,EAAYhC,QACrBC,eAAgBA,IAEnBf,EAAQH,QAAQE,KAAI,SAACsD,EAAWpD,GAAZ,OACjB,uBAAGA,IAAKA,GAAMoD,MAElB,kBAAC,EAAD,CAAc9C,SAAUuC,EAAYvC,WACpC,kBAAC,EAAD,CAAiBM,YAAalB,EAAMoB,eAAgBA,IACpD,gDACA,kBAAC,EAAD,CAAcrB,SAAUyD,MC5BrBG,EAZA,kBACX,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMpD,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,kBAAT,gB,MCqBDqD,MApBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK9C,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKc,GAAG,aACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiC,KAAK,IAAIC,UAAWjE,EAAUkE,OAAK,IAC1C,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWhE,IAChC,kBAAC,IAAD,CAAO+D,KAAK,iBAAiBC,UAAWrD,IACxC,kBAAC,IAAD,CAAOoD,KAAK,iBAAiBC,UAAWE,IACxC,kBAAC,IAAD,CAAOF,UAAWhB,SCTVmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCXNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.760f604a.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nconst HomePage = () => (\n    <Fragment>\n        <h1>Hello, welcome to my blog!</h1>\n        <p>Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n        </p>\n        <p>Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n        </p>\n    </Fragment>\n);\n\nexport default HomePage;","import React, { Fragment } from 'react';\n\nconst AboutPage = () => (\n    <Fragment>\n        <h1>About Me</h1>\n        <p>Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n        </p>\n        <p>Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n           Welcome to my blog! lorem ipsom filler text goes hereree.\n        </p>\n    </Fragment>\n);\n\nexport default AboutPage;","const articles = [\n    {\n        name: 'learn-react',\n        title: 'The Fastest Way to Learn React',\n        content: [\n            \"Welcome! Today we're going to be talking about the fastest way to learn React. We'll be discussing some topics...\"\n        ]\n    },\n    {\n        name: 'learn-node',\n        title: 'The Fastest Way to Learn Node',\n        content: [\n            \"Welcome! Today you will learn how you can learn node very fastttttt\"\n        ]\n    }\n];\n\nexport default articles;","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ArticlesList = ({ articles }) => (\n    <Fragment>\n        {articles.map((article, key) => (\n            <Link key={key} to={`/article/${article.name}`}>\n                <h3>{article.title}</h3>\n                <p>{article.content[0].substring(-article, 150)}...</p>\n            </Link>\n            \n        ))}\n    </Fragment>\n);\n\nexport default ArticlesList;","import React, { Fragment } from 'react';\nimport articleContent from './article-content';\nimport ArticlesList from '../components/ArticlesList';\n\nconst ArticlesListPage = () => (\n    <Fragment>\n        <h1>Articles List</h1>\n        <ArticlesList articles={articleContent} />\n    </Fragment>\n);\n\nexport default ArticlesListPage;","import React, { Fragment } from 'react';\n\nconst CommentsList = ({ comments }) => (\n    <Fragment>\n        <h3>Comments:</h3>\n        {comments.map((comment, key) => (\n            <div className=\"comment\" key={key}>\n                <h4>{comment.username}</h4>\n                <p>{comment.text}</p>\n            </div>\n        ))}\n    </Fragment>\n)\n\nexport default CommentsList;","import React from 'react';\n\nconst UpvotesSection = ({ articleName, upvotes, setArticleInfo }) => {\n    \n    const upvoteArticle = async () => {\n        const result =  await fetch(`/api/articles/${articleName}/upvote`, {\n            method: 'post',\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n    }\n\n    return (\n        <div id=\"upvotes-section\">\n            <button onClick={() => upvoteArticle()}>Add Upvote</button>\n            <p>This post has been upvoted {upvotes} times</p>\n        </div>\n    );\n}\n    \n\nexport default UpvotesSection;","import React, { useState } from 'react';\n\nconst AddCommentsForm = ({ articleName, setArticleInfo  }) => {\n\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n\n    const addComment = async () => {\n        const result = await fetch(`/api/articles/${articleName}/add-comment`, {\n            method: 'post',\n            body: JSON.stringify({ username, text: commentText }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n        setUsername('');\n        setCommentText('');\n    }\n    \n    return (\n        <div id=\"add-comment-form\">\n            <h3>Add a Comment</h3>\n            <label>\n                Name:\n                <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\n            </label>\n            <label>\n                Comment: \n                <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)} />\n            </label>\n            <button onClick={() => addComment()}>Add Comment</button>\n        </div>\n    );\n};\n    \n\n\nexport default AddCommentsForm;","import React from 'react';\n\nconst NotFoundPage = () => (\n    <h1>404: Page Not Found</h1>\n);\n\nexport default NotFoundPage;","import React, { Fragment, useState, useEffect } from 'react';\nimport ArticlesList from '../components/ArticlesList';\nimport CommentsList from '../components/CommentsList';\nimport UpvotesSection from '../components/UpvotesSection';\nimport AddCommentsForm from '../components/AddCommentForm';\nimport NotFoundPage from './NotFoundPage';\nimport articleContent from './article-content';\n\nconst ArticlesPage = ({ match }) => {\n\n    const name = match.params.name;\n    const article = articleContent.find(article => article.name === name);\n\n    const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] });\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const result = await fetch(`/api/articles/${name}`);\n            const body = await result.json();\n            console.log(body, 'body');\n            setArticleInfo(body);\n        }\n        fetchData();\n    }, [name]);\n;\n    if (!article) return <NotFoundPage />\n\n    const otherArticles = articleContent.filter(article => article.name !== name);\n\n    return (\n        <Fragment>\n            <h1>{article.title}</h1>\n            <UpvotesSection \n                articleName={name} \n                upvotes={articleInfo.upvotes} \n                setArticleInfo={setArticleInfo}  \n            />\n            {article.content.map((paragraph, key) => (\n                <p key={key}>{paragraph}</p>\n            ))}\n            <CommentsList comments={articleInfo.comments} />\n            <AddCommentsForm articleName={name} setArticleInfo={setArticleInfo} />\n            <h3>Other Articles: </h3>\n            <ArticlesList articles={otherArticles} />\n        </Fragment>\n    );\n}\n\nexport default ArticlesPage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => (\n    <nav>\n        <ul>\n            <li>\n                <Link to=\"/\">Home</Link>\n                <Link to=\"/about\">About</Link>\n                <Link to=\"/articles-list\">Articles</Link>\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default NavBar;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport ArticlePage from './pages/ArticlePage';\nimport NotFoundPage from './pages/NotFoundPage';\nimport NavBar from './NavBar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <div id=\"page-body\">\n          <Switch>\n            <Route path=\"/\" component={HomePage} exact />\n            <Route path=\"/about\" component={AboutPage} />\n            <Route path=\"/articles-list\" component={ArticlesListPage} />\n            <Route path=\"/article/:name\" component={ArticlePage} />\n            <Route component={NotFoundPage} />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}